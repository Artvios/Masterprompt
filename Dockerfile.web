# Build stage
FROM node:20-alpine AS builder

# Install pnpm
RUN corepack enable && corepack prepare pnpm@8 --activate

WORKDIR /app

# Copy package files
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY apps/studio-web/package.json ./apps/studio-web/
COPY packages/*/package.json ./packages/*/

# Install all dependencies
RUN pnpm install --frozen-lockfile

# Copy source code
COPY . .

# Build the web application
ENV NEXT_TELEMETRY_DISABLED=1
RUN pnpm --filter @prompt-studio/studio-web build

# Production stage
FROM node:20-alpine AS production

# Install dumb-init for proper signal handling
RUN apk add --no-cache dumb-init

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

WORKDIR /app

# Copy the standalone build
COPY --from=builder --chown=nodejs:nodejs /app/apps/studio-web/.next/standalone ./
COPY --from=builder --chown=nodejs:nodejs /app/apps/studio-web/.next/static ./apps/studio-web/.next/static
COPY --from=builder --chown=nodejs:nodejs /app/apps/studio-web/public ./apps/studio-web/public

# Switch to non-root user
USER nodejs

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=10s --retries=3 \
    CMD node -e "require('http').get('http://localhost:3000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1); })"

# Set production environment
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start the Next.js server
CMD ["node", "apps/studio-web/server.js"]