version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_MULTIPLE_DATABASES: prompt_studio,litellm,langfuse,flowise
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-multiple-dbs.sh:/docker-entrypoint-initdb.d/init-multiple-dbs.sh
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  litellm:
    image: ghcr.io/berriai/litellm:main-stable
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8001:8000"
    volumes:
      - ./litellm_config.yaml:/app/config.yaml
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/litellm
      - LITELLM_MASTER_KEY=${LITELLM_MASTER_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - LITELLM_API_BASE=${LITELLM_API_BASE}
    command: --config /app/config.yaml --port 8000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  langfuse:
    image: langfuse/langfuse:latest
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "3002:3000"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/langfuse
      - NEXTAUTH_URL=http://localhost:3002
      - NEXTAUTH_SECRET=mysecret
      - SALT=mysalt
      - LANGFUSE_ENABLE_EXPERIMENTAL_FEATURES=true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/public/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  ollama:
    image: ollama/ollama:latest
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G

  weaviate:
    image: semitechnologies/weaviate:latest
    ports:
      - "8080:8080"
      - "50051:50051"
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'text2vec-openai'
      ENABLE_MODULES: 'text2vec-openai,generative-openai'
      OPENAI_APIKEY: ${OPENAI_API_KEY:-sk-test}
      CLUSTER_HOSTNAME: 'weaviate'
    volumes:
      - weaviate_data:/var/lib/weaviate
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/.well-known/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  flowise:
    image: flowiseai/flowise:latest
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "3100:3000"
    environment:
      - PORT=3000
      - DATABASE_TYPE=postgres
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_NAME=flowise
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=postgres
      - FLOWISE_SECRETKEY_OVERWRITE=${FLOWISE_SECRET_KEY:-my_flowise_secret_key}
      - MODE=queue
      - QUEUE_NAME=flowise-queue
      - REDIS_URL=redis://redis:6379
      - WORKER_CONCURRENCY=2
      - ENABLE_BULLMQ_DASHBOARD=true
      - LOG_LEVEL=info
      - LOG_PATH=/root/.flowise/logs
      - APIKEY_STORAGE_TYPE=db
      - TOOL_FUNCTION_BUILTIN_DEP=
      - TOOL_FUNCTION_EXTERNAL_DEP=
    volumes:
      - flowise_data:/root/.flowise
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  flowise-worker:
    image: flowiseai/flowise:latest
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      flowise:
        condition: service_healthy
    environment:
      - DATABASE_TYPE=postgres
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_NAME=flowise
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=postgres
      - FLOWISE_SECRETKEY_OVERWRITE=${FLOWISE_SECRET_KEY:-my_flowise_secret_key}
      - MODE=worker
      - QUEUE_NAME=flowise-queue
      - REDIS_URL=redis://redis:6379
      - WORKER_CONCURRENCY=2
      - LOG_LEVEL=info
      - LOG_PATH=/root/.flowise/logs
    volumes:
      - flowise_data:/root/.flowise
    deploy:
      replicas: 2

volumes:
  postgres_data:
  ollama_data:
  weaviate_data:
  redis_data:
  flowise_data:

networks:
  default:
    name: prompt-studio-network